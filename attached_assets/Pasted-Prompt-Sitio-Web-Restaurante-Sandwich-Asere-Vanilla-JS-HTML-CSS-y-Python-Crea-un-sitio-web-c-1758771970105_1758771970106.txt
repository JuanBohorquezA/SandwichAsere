Prompt: Sitio Web Restaurante "Sandwich Asere" - Vanilla JS, HTML, CSS y Python
Crea un sitio web completo para el restaurante "Sandwich Asere" utilizando HTML vanilla, CSS puro, JavaScript vanilla y Python FastAPI. El sitio debe ser completamente funcional con las siguientes especificaciones:

üé® Paleta de Colores (Obligatoria)
Verde principal: #46C47B
Naranja acento: #FF914C
Crema/beige: #FDFFD0
Implementar como variables CSS en :root para consistencia

üèóÔ∏è Arquitectura del Proyecto
/
‚îú‚îÄ‚îÄ index.html          # P√°gina principal
‚îú‚îÄ‚îÄ styles.css          # Estilos globales
‚îú‚îÄ‚îÄ main.py             # Servidor FastAPI
‚îú‚îÄ‚îÄ models.py           # Modelos Pydantic
‚îî‚îÄ‚îÄ js/
    ‚îú‚îÄ‚îÄ main.js         # L√≥gica principal
    ‚îú‚îÄ‚îÄ products.js     # Gesti√≥n de productos
    ‚îú‚îÄ‚îÄ cart.js         # Carrito de compras
    ‚îî‚îÄ‚îÄ ui.js           # Componentes UI

üì± Frontend - HTML/CSS/JS Vanilla
Estructura HTML (index.html):

Header con navegaci√≥n y bot√≥n de carrito (logo: usa /assets/logo.png o importar desde src seg√∫n preferencia)
Secci√≥n Hero con call-to-action (bot√≥n "Comprar ahora" ghost que en hover se vuelve s√≥lido con transition 0.2s)
Cat√°logo de productos con filtros por categor√≠a
Formulario de contacto
Footer
Cart sidebar (offcanvas)

Funcionalidades JavaScript:

Gesti√≥n de productos: Cargar desde API, filtros por categor√≠a, b√∫squeda
Carrito de compras: Agregar/quitar items, persistencia en localStorage (o sessionStorage si se prefiere), c√°lculo total
UI interactions: Navegaci√≥n suave, modales, sidebar cart, formularios
API calls: Fetch para productos, env√≠o de contacto

Categor√≠as de productos:

S√°ndwiches (sandwiches)
Platos principales (platos)
Bebidas (bebidas)
Postres (postres)

üêç Backend - Python FastAPI
Endpoints requeridos:

GET /api/health          # Health check
GET /api/products        # Todos los productos
GET /api/products?category=sandwiches  # Filtrar por categor√≠a
GET /api/products/{id}   # Producto espec√≠fico
GET /api/categories      # Categor√≠as disponibles
POST /api/contact        # Enviar mensaje de contacto
POST /api/purchase       # Procesar compra (opcional)

Modelos Pydantic (models.py):

Product: id, name, description, price, category, image, popular
Category: id, name
ContactMessage: name, email, message, created_at
CartItem: product_id, quantity, price
PurchaseRequest: items, total, customer info

üçΩÔ∏è Productos del Restaurante (M√≠nimo 12)
S√°ndwiches:
- S√°ndwich Cubano Cl√°sico ($12.99)
- Medianoche ($11.99)
- Pan con Lech√≥n ($13.99)

Platos Principales:
- Ropa Vieja ($16.99)
- Pollo a la Plancha ($14.99)
- Pescado a la Veracruzana ($18.99)
- Arroz con Pollo ($15.99)

Bebidas:
- Caf√© Cubano ($3.99)
- Mojito Sin Alcohol ($6.99)
- Guarapo de Ca√±a ($4.99)

Postres:
- Flan Cubano ($6.99)
- Churros Cubanos ($5.99)
- Helado de Coco ($4.99)

‚ú® Caracter√≠sticas Especiales
Design System:

Tipograf√≠a: Poppins (headers) + Inter (body)
Componentes reutilizables en CSS
Responsive design (mobile-first)
Animaciones suaves con CSS transitions

Funcionalidades avanzadas:

Carrito persistente (localStorage)
Filtros en tiempo real
Contador de items en carrito
Validaci√≥n de formularios
Estados de carga
Manejo de errores

SEO y Accessibility:

Meta tags apropiados
Alt text en im√°genes
ARIA labels
Navegaci√≥n por teclado
Sem√°ntica HTML correcta

üîß Configuraci√≥n T√©cnica
Python requirements:

fastapi
uvicorn
pydantic
email-validator
jinja2
python-multipart

Servidor FastAPI:

Puerto 5000
CORS configurado
Servir archivos est√°ticos
Documentaci√≥n autom√°tica en /api/docs

JavaScript modular:

ES6+ features
Fetch API para HTTP requests
Event delegation
Error handling robusto

üéØ Funcionalidad Completa Esperada
Navegaci√≥n fluida entre secciones
Cat√°logo din√°mico con filtros funcionales
Carrito interactivo con add/remove/update
Formulario de contacto con validaci√≥n
Responsive design para mobile/desktop
Persistencia de datos (localStorage + API)
Estados de UI (loading, success, error)

Resultado final: Una aplicaci√≥n web completamente funcional, moderna y profesional para el restaurante "Sandwich Asere", sin frameworks frontend, usando solo tecnolog√≠as web nativas y Python para el backend.
